function plotAsSelected() {
  function processDynamicSetup(plot)  {
    function setDynamicOptions(plot) {
      function calculateOpts(xaxis_range) {
        var points = {show: false},
            lines = {show: false},
            bars = {show: false},
            month = 1000*60*60*24*30,
            show_tooltips = false;

        if (IS_OVERVIEW) {
          if (xaxis_range > month) {
            bars.show = true;
            bars.barWidth = xaxis_range/30;
          }
          else  {
            lines.show = true;
            points.show = true;
            points.radius = 3;
            show_tooltips = true;
          }
        }
        else {
          lines.show = true;
          show_tooltips = true;
          if (xaxis_range < 3*month && xaxis_range > month) {
            points.show = true;
            points.radius = 2;
          }
          else if (xaxis_range < month)  {
            points.show = true;
            points.radius = 3;
          }
        }
        return {
          series: {
            points: points,
            lines: lines,
            bars: bars
          },
          grid: {
            show_tooltips: show_tooltips
          }
        };
      }

      var xaxis_range;
      if (!plot.getOptions().xaxis.max || !plot.getOptions().xaxis.min) {
        xaxis_range = <%= @report.flot[:zoom_range][1] %>;
      }
      else  {
        xaxis_range = plot.getOptions().xaxis.max - plot.getOptions().xaxis.min;
      }

      $.extend(true, plot.getOptions(), calculateOpts(xaxis_range));
    }

    function transformOverviewData(plot)  {
      function avgY(sdata, prev_tick, tick) {
        var ey = 0,
            q = 0;
        $.each(sdata, function(i, v) {
            if (v[0] > prev_tick && v[0] <= tick) {
              ey+= v[1];
              q++;
            }
        });
        return ey/q;
      }

      //we only want to summarise bar data
      if (!plot.getOptions().series.bars.show) {
        return SERIES;
      }

      //generate average per tick data
      var ticks = plot.getAxes().xaxis.ticks,
          new_series = [];

      $.each(SERIES, function(i, s) {
          new_series[i] = {
            label: s.label,
            data: [],
            bars: {align: i == 0 ? 'center' : 'left'}
          };
          $.each(ticks, function(j, v) {
              var prev_tick = ticks[j-1];
              if (prev_tick)  {
                new_series[i].data.push([v.v, avgY(s.data, prev_tick.v, v.v)]);
              }
          });
      });
      return new_series;
    }

    setDynamicOptions(plot);

    plot.setData(IS_OVERVIEW ? transformOverviewData(plot) : SERIES);
  }

  function setupTooltips(plot) {
    var previousPoint = null;
    plot.getPlaceholder().bind("plothover", function (event, pos, item) {
        if (!plot.getOptions().grid.show_tooltips)  {
          return;
        }
        if (item) {
          if (previousPoint != item.datapoint) {
            previousPoint = item.datapoint;
            
            removeTooltip();

            var label = /-|^0/.test(item.datapoint[1]) ? item.datapoint[1] : '+'+item.datapoint[1];
            showTooltip(item.pageX, item.pageY, label);
          }
        }
        else {
          removeTooltip();
          previousPoint = null;            
        }
    });
  }

  var tab_idx = $('#sensor_sel_tabs').tabs('option', 'selected'),
      data = <%= @report.flot[:data].to_json %>,
      IS_OVERVIEW = SENSORS[tab_idx].key == 'overview';

  var SERIES = [];
  for (loc in data)  {
    SERIES.push({
      data: data[loc][SENSORS[tab_idx].key],
      label: loc
    });
  }

  var opts = {
    xaxis: {
      mode: 'time',
      zoomRange: <%= @report.flot[:zoom_range].to_json %>,
      panRange: <%= @report.flot[:pan_range].to_json %>
    },
    yaxis: {
      min: SENSORS[tab_idx].min_y,
      max: SENSORS[tab_idx].max_y,
      zoomRange: [SENSORS[tab_idx].max_y - SENSORS[tab_idx].min_y, SENSORS[tab_idx].max_y - SENSORS[tab_idx].min_y],
      panRange: [SENSORS[tab_idx].min_y, SENSORS[tab_idx].max_y]
    },
    grid: {
      color: $('.ui-widget-header').css('background-color'),
      hoverable: true
    },
    zoom: {
      interactive: true
    },
    pan: {
      interactive: true
    },
    hooks: {
      processSetup: [processDynamicSetup]
    }
  };

  var plot = $.plot($('#graph'+tab_idx), SERIES, opts);
  setupTooltips(plot);

  return plot;
}

var sen_sel = $('#sensor_sel_tabs');
var SENSORS = <%= @report.flot[:sensors].to_json %>;

if (!sen_sel.tabs('length'))  {// crafty check if tabs have already been initialized
  sen_sel.prepend('<ul></ul>').tabs();

  $.each(SENSORS, function(i, val) {
      var graph = $('<div id="graph'+i+'" class="flot-graph"/>');
      var graph_w = parseInt( /\d+/.exec(graph.css('width')) );
      var graph_h = parseInt( /\d+/.exec(graph.css('height')) );
      var graph_container = $('<div id="graph_cont'+i+'" style="width: '+ (graph_w + 30) +'px; height: '+ (graph_h + 20) +'px;"/>');
      graph_container.append(graph);
      sen_sel.append(graph_container).tabs('add', '#graph_cont'+i, val.name);
  });
  sen_sel.bind('tabsshow', function() {plotAsSelected()});
  sen_sel.tabs('select', 0);
}

_PLOT = plotAsSelected();//FIXME _PLOT is for accessing plot from firebug console. Remove after development is complete

$('#loading').hide();
$('input.ui-widget').val('');

